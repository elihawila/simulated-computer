/**
 * 16-bit multiplexor: 
 * for i = 0..15 out[i] = a[i] if sel == 0 
 *                        b[i] if sel == 1
 */

CHIP Mux16 {
    IN a[16], b[16], sel;
    OUT out[16];

    PARTS:
    Not (in=sel, out=notsel);
    And (a=a[0], b=notsel, out=c1);
    And (a=b[0], b=sel, out=c1a);
    Or (a=c1, b=c1a, out=out[0]);


    And (a=a[1], b=notsel, out=c2);
    And (a=b[1], b=sel, out=c2a);
    Or (a=c2, b=c2a, out=out[1]);


    And (a=a[2], b=notsel, out=c3);
    And (a=b[2], b=sel, out=c3a);
    Or (a=c3, b=c3a, out=out[2]);


    And (a=a[3], b=notsel, out=c4);
    And (a=b[3], b=sel, out=c4a);
    Or (a=c4, b=c4a, out=out[3]);


    And (a=a[4], b=notsel, out=c5);
    And (a=b[4], b=sel, out=c5a);
    Or (a=c5, b=c5a, out=out[4]);


    And (a=a[5], b=notsel, out=c6);
    And (a=b[5], b=sel, out=c6a);
    Or (a=c6, b=c6a, out=out[5]);


    And (a=a[6], b=notsel, out=c7);
    And (a=b[6], b=sel, out=c7a);
    Or (a=c7, b=c7a, out=out[6]);


    And (a=a[7], b=notsel, out=c8);
    And (a=b[7], b=sel, out=c8a);
    Or (a=c8, b=c8a, out=out[7]);


    And (a=a[8], b=notsel, out=c9);
    And (a=b[8], b=sel, out=c9a);
    Or (a=c9, b=c9a, out=out[8]);


    And (a=a[9], b=notsel, out=c10);
    And (a=b[9], b=sel, out=c10a);
    Or (a=c10, b=c10a, out=out[9]);


    And (a=a[10], b=notsel, out=c11);
    And (a=b[10], b=sel, out=c11a);
    Or (a=c11, b=c11a, out=out[10]);


    And (a=a[11], b=notsel, out=c12);
    And (a=b[11], b=sel, out=c12a);
    Or (a=c12, b=c12a, out=out[11]);


    And (a=a[12], b=notsel, out=c13);
    And (a=b[12], b=sel, out=c13a);
    Or (a=c13, b=c13a, out=out[12]);


    And (a=a[13], b=notsel, out=c14);
    And (a=b[13], b=sel, out=c14a);
    Or (a=c14, b=c14a, out=out[13]);


    And (a=a[14], b=notsel, out=c15);
    And (a=b[14], b=sel, out=c15a);
    Or (a=c15, b=c15a, out=out[14]);


    And (a=a[15], b=notsel, out=c16);
    And (a=b[15], b=sel, out=c16a);
    Or (a=c16, b=c16a, out=out[15]);
}
